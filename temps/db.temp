package models

import (
	"github.com/liao0001/orm"
	"time"
)

type {{$.obj.ObjectName}} struct {
	ID         int       `json:"id" xorm:"id pk autoincr"`
	{{ range $v,$v:= $.obj.Fields }}{{$v.FieldName}}  {{$v.FieldType}} `json:"{{$v.JsonName}}" xorm:"{{$v.JsonName}}{{if $v.IsJson}} json{{end}}"` //{{$v.FieldLabel}} {{$v.Comment}}
	{{end}}CreatedAt  time.Time `json:"created_at" xorm:"created_at created"`
	{{if not $.obj.NotUpdate}}UpdatedAt  time.Time `json:"updated_at" xorm:"updated_at updated"`{{end}}
	{{if not $.obj.NotDelete}}DeletedAt  time.Time `json:"deleted_at" xorm:"deleted_at deleted"`{{end}}
}

func (*{{$.obj.ObjectName}}) TableName() string {
	return "{{$.obj.ObjectJsonNames}}"
}


type {{$.obj.ObjectName}}Repo struct {
	*orm.Collection
}

func (r *{{$.obj.ObjectName}}Repo) GetFields() []FieldInfo {
	return []FieldInfo{
	  {{ range $v,$v:= $.obj.Fields }}{{if $v.IsHidden}}{{else}}{Name: "{{$v.JsonName}}", Label: "{{$v.FieldLabel}}", FieldType: "{{$v.DisplayType}}", IndexWidth: {{$v.IndexWidth}}},
	  {{end}}{{end}}{Name: "created_at", Label: "创建时间", FieldType: "datetime", IndexWidth: 140},
	  {{if not $.obj.NotUpdate}}{Name: "updated_at", Label: "更新时间", FieldType: "datetime", IndexWidth: 140},{{end}}
	}
}

func (r *{{$.obj.ObjectName}}Repo) GetDisplayFields() []string {
	fields := r.GetFields()
	res := make([]string, len(fields))
	for i := 0; i < len(fields); i++ {
		res[i] = fields[i].Name
	}
	return res
}

func (r *{{$.obj.ObjectName}}Repo) GetAll{{$.obj.ObjectNames}}() ([]{{$.obj.ObjectName}}, error) {
	var arr []{{$.obj.ObjectName}}
	err := r.Where().All(&arr)
	return arr, err
}

func (r *{{$.obj.ObjectName}}Repo) Get{{$.obj.ObjectNames}}ByPage(page int, pageSize int, orderBy string, query orm.Cond) ([]{{$.obj.ObjectName}}, error) {
	if len(orderBy) == 0 {
		orderBy = "created_at"
	}

	var arr []{{$.obj.ObjectName}}
	err := r.Where(query).Limit(pageSize).Offset(pageSize * (page - 1)).OrderBy(orderBy).All(&arr)
	return arr, err
}

func (r *{{$.obj.ObjectName}}Repo) GetAll{{$.obj.ObjectNames}}ByIds(ids []int) ([]{{$.obj.ObjectName}}, error) {
	var arr []{{$.obj.ObjectName}}
	err := r.Where(orm.Cond{"id in": ids}).All(&arr)
	return arr, err
}

func (r *{{$.obj.ObjectName}}Repo) GetAll{{$.obj.ObjectName}}Map() (map[int]{{$.obj.ObjectName}}, error) {
	var m map[int]{{$.obj.ObjectName}}
	err := r.Where().All(&m)
	return m, err
}

func (r *{{$.obj.ObjectName}}Repo) Get{{$.obj.ObjectName}}MapByIds(ids []int) (map[int]{{$.obj.ObjectName}}, error) {
	var m map[int]{{$.obj.ObjectName}}
	err := r.Where(orm.Cond{"id in": ids}).All(&m)
	return m, err
}

func (r *{{$.obj.ObjectName}}Repo) Get{{$.obj.ObjectName}}ById(id int) (*{{$.obj.ObjectName}}, error) {
	var o {{$.obj.ObjectName}}
	err := r.ID(id).Get(&o)
	return &o, err
}

func (r *{{$.obj.ObjectName}}Repo) Insert{{$.obj.ObjectName}}({{$.obj.ObjectBsonName}} *{{$.obj.ObjectName}}) (int, error) {
	idInter, err := r.Insert({{$.obj.ObjectBsonName}})
	if err != nil {
		return 0, err
	}
	return (int)(idInter.(int64)), nil
}
