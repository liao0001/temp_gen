package models

import (
	"github.com/liao0001/orm"
	"time"
)

type {{.obj.ObjectName}} struct {
	ID         int       `json:"id" xorm:"id pk autoincr"`
	Use rName   string    `json:"user_name" xorm:"user_name"`
	Nickname   string    `json:"nickname" xorm:"nickname"`
	Gender     Gender    `json:"gender" xorm:"gender"`
	Birth      time.Time `json:"birth" xorm:"birth"`
	HeadimgUrl string    `json:"headimg_url" xorm:"headimg_url"`
	Password   string    `json:"password" xorm:"password"`
	Email      string    `json:"email" xorm:"email"`
	Phone      string    `json:"phone" xorm:"phone"`
	FixedPhone string    `json:"fixed_phone" xorm:"fixed_phone"`
	CreatedAt  time.Time `json:"created_at" xorm:"created_at created"`
	UpdatedAt  time.Time `json:"updated_at" xorm:"updated_at updated"`
}

func (user *User) TableName() string {
	return "users"
}

type Gender int

func (g Gender) String() string {
	switch g {
	case 1:
		return "男"
	case 2:
		return "女"
	}
	return ""
}

type UserRepo struct {
	*orm.Collection
}

func (r *UserRepo) GetFields() []FieldInfo {
	return []FieldInfo{
		{Name: "user_name", Label: "用户名", FieldType: "text", IndexWidth: 100},
		{Name: "nickname", Label: "姓名", FieldType: "text", IndexWidth: 200},
		{Name: "gender", Label: "性别", FieldType: "text", IndexWidth: 140},
		{Name: "email", Label: "邮箱", FieldType: "text", IndexWidth: 140},
		{Name: "phone", Label: "手机", FieldType: "text", IndexWidth: 140},
		{Name: "fixed_phone", Label: "固定电话", FieldType: "text", IndexWidth: 140},
		{Name: "birth", Label: "出生日期", FieldType: "date", IndexWidth: 140},
		{Name: "created_at", Label: "创建时间", FieldType: "datetime", IndexWidth: 140},
		{Name: "updated_at", Label: "更新时间", FieldType: "datetime", IndexWidth: 140},
	}
}

func (r *UserRepo) GetDisplayFields() []string {
	fields := r.GetFields()
	res := make([]string, len(fields))
	for i := 0; i < len(fields); i++ {
		res[i] = fields[i].Name
	}
	return res
}

func (r *UserRepo) GetAllUsers() ([]User, error) {
	var arr []User
	err := r.Where().All(&arr)
	return arr, err
}

func (r *UserRepo) GetUsersByPage(page int, pageSize int, orderBy string, query orm.Cond) ([]User, error) {
	if len(orderBy) == 0 {
		orderBy = "created_at"
	}

	var arr []User
	err := r.Where(query).Limit(pageSize).Offset(pageSize * (page - 1)).
		OrderBy(orderBy).All(&arr)
	return arr, err
}

func (r *UserRepo) GetAllUsersByIds(ids []int) ([]User, error) {
	var arr []User
	err := r.Where(orm.Cond{"id in": ids}).All(&arr)
	return arr, err
}

func (r *UserRepo) GetAllUserMap() (map[int]User, error) {
	var m map[int]User
	err := r.Where().All(&m)
	return m, err
}

func (r *UserRepo) GetAllUserMapByIds(ids []int) (map[int]User, error) {
	var m map[int]User
	err := r.Where(orm.Cond{"id in": ids}).All(&m)
	return m, err
}

func (r *UserRepo) GetUserById(userId int) (*User, error) {
	var user User
	err := r.ID(userId).Get(&user)
	return &user, err
}

func (r *UserRepo) InsertUser(user *User) (int, error) {
	idInter, err := r.Insert(user)
	if err != nil {
		return 0, err
	}
	return (int)(idInter.(int64)), nil
}
