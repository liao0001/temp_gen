package models

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/go-xorm/core"
	"github.com/go-xorm/xorm"
	"github.com/liao0001/orm"
	"github.com/revel/revel"
	"io"
	"os"
	"path/filepath"
	"reflect"
	"strconv"
	"strings"
	"time"
)

type DB struct {
	Engine  *xorm.Engine
	session *xorm.Session
}

func (db *DB) WithSession(sess *xorm.Session) *DB {
	return &DB{Engine: db.Engine, session: sess}
}

func (db *DB) Begin() (*DB, error) {
	if db.session != nil {
		return nil, errors.New("run in the transaction")
	}
	session := db.Engine.NewSession()

	//开启事务
	session.Begin()

	return &DB{Engine: db.Engine, session: session}, nil
}

func (db *DB) Commit() error {
	if db.session == nil {
		return sql.ErrTxDone
	}
	err := db.session.Commit()
	db.session = nil
	return err
}

func (db *DB) Rollback() error {
	if db.session == nil {
		return sql.ErrTxDone
	}
	err := db.session.Rollback()
	db.session = nil
	return err
}

func (db *DB) Close() error {
	return db.Rollback()
}

func (db *DB) Query(sqlStr string, args ...interface{}) orm.Queryer {
	return orm.NewWithNoInstance()(db.Engine).WithSession(db.session).Query(sqlStr, args...)
}

func (db *DB) Exec(sqlStr string, args ...interface{}) (sql.Result, error) {
	return orm.NewWithNoInstance()(db.Engine).WithSession(db.session).Exec(sqlStr, args...)
}

func (db *DB) Apartments() *orm.Collection {
	return orm.New(func() interface{} {
		return &Apartment{}
	})(db.Engine).WithSession(db.session)
}


func InitTables(engine *xorm.Engine) error {
	beans := []interface{}{
		&Project{},
	}

	if err := engine.Sync2(beans...); err != nil {
		return err
	}

	return nil
}
